#!/usr/bin/env bash
set -o errexit
set -o nounset
set -o pipefail

#
# Usage: assume-role [ROLE NAME] [COMMANDS]...
#
#
# OPTIONS
#   -h, --help
#                Print this help message
#
# EXAMPLES
#
# Having a cli config setup like describe in AWS CLI Userguide ( see README.md )
#
# - print temporary credentials:
#
# $ assume-role ROLENAME
#   export AWS_ACCESS_KEY_ID="...."
#   export AWS_SECRET_ACCESS_KEY="..."
#   export AWS_SESSION_TOKEN="..."
#
# - export temporary role credentials into a shell session:
#
# $ eval $(assume-role ROLENAME)
#
# - execute a program or script with temporary role credentials
#
# $ assume-role ROLENAME /path/to/my-script arg1 --flag
#

function err() {
    echo "$@" >&2
    exit 1
}

# use 1 hour duration by default
ASSUME_DEFAULT_DURATION=3600

function build_command() {
    local rolename
    local role_arn
    local source_profile
    local external_id
    local mfa_serial
    local role_session_name

    rolename=$1

    role_arn=$(aws configure get role_arn --profile "${rolename}")

    if [ -z "$role_arn" ]; then
        err "ARN for role not found under profile $rolename"
    fi

    source_profile=$(aws configure get source_profile --profile "${rolename}")

    if [ -z "$source_profile" ]; then
        err "source_profile not found under profile $rolename"
    fi

    command=(aws --profile "${source_profile}" sts assume-role --role-arn "${role_arn}")


    duration_seconds=$(aws configure get duration_seconds --profile "${rolename}" || echo "${ASSUME_DEFAULT_DURATION}" )
    command+=(--duration-seconds "${duration_seconds}")

    role_session_name=$(aws configure get role_session_name --profile "${rolename}" || echo "${rolename}-session" )
    command+=(--role-session-name "${role_session_name}")

    mfa_serial=$(aws configure get mfa_serial --profile "${rolename}")
    if [ -n  "$mfa_serial" ]; then
        echo -n "MFA code: " >&2
        read -r token
        command+=(--serial-number "${mfa_serial}" --token-code "${token}")
    fi

    external_id=$(aws configure get external_id --profile "${rolename}" || true)
    if [ -n  "$external_id" ]; then
        command+=(--external-id "${external_id}")
    fi

    command+=(--output text --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]')
}

function print_credentials() {
    local credentials
    credentials=("$@")
    echo "export AWS_ACCESS_KEY_ID=${credentials[0]}"
    echo "export AWS_SECRET_ACCESS_KEY=${credentials[1]}"
    echo "export AWS_SESSION_TOKEN=${credentials[2]}"
}

function export_credentials() {
    local credentials
    credentials=("$@")
    export AWS_ACCESS_KEY_ID=${credentials[0]}
    export AWS_SECRET_ACCESS_KEY=${credentials[1]}
    export AWS_SESSION_TOKEN=${credentials[2]}
}

function get_credentials() {
    local rolename
    rolename=$1
    build_command "$rolename"
    credentials=()
    read -r -a credentials <<< "$("${command[@]}")"
}


# main

if (( $# == 0 )); then
    echo "available roles in ~/.aws/config"
    aws configure list-profiles
    exit 1
fi

build_command "$1"
read -r -a credentials <<< "$("${command[@]}")"
shift

if [ ${#credentials[@]} -eq 0 ]; then
    err "Could not assume role!"
fi

if (( $# == 0 )); then
    print_credentials "${credentials[@]}"
    exit 0
fi

# export and execute rest
export_credentials "${credentials[@]}"
"$@"
